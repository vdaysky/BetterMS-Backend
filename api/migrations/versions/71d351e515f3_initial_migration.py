"""Initial migration

Revision ID: 71d351e515f3
Revises: 
Create Date: 2023-05-17 12:55:21.469058

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision = '71d351e515f3'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('event',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('map',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('display_name', sqlmodel.sql.sqltypes.AutoString(length=32), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=32), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('map_tag',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=32), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )

    op.create_table('role',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('tab_prefix', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('tab_color', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('chat_prefix', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('chat_suffix', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('chat_color', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('chat_message_color', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('team_override_color', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('player',
                    sa.Column('verified_at', sa.DateTime(timezone=True), nullable=True),
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('uuid', sqlmodel.sql.sqltypes.GUID(), nullable=False),
                    sa.Column('role_id', sa.Integer(), nullable=False),
                    sa.Column('elo', sa.Integer(), nullable=False),
                    sa.Column('location', sa.Integer(), nullable=False),
                    sa.Column('in_server', sa.Boolean(), nullable=False),
                    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('uuid')
                    )
    op.create_table('player_permission',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('team',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('short_name', sqlmodel.sql.sqltypes.AutoString(length=10), nullable=False),
    sa.Column('full_name', sqlmodel.sql.sqltypes.AutoString(length=10), nullable=False),
    sa.Column('active', sa.Boolean(), nullable=False),
    sa.Column('location', sa.Integer(), nullable=False),
    sa.Column('elo', sa.Integer(), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['player.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('full_name'),
    sa.UniqueConstraint('short_name')
    )
    op.create_table('authsession',
    sa.Column('data', sa.JSON(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('player_id', sa.Integer(), nullable=True),
    sa.Column('session_key', sqlmodel.sql.sqltypes.AutoString(length=64), nullable=False),
    sa.ForeignKeyConstraint(['player_id'], ['player.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('blacklisted_player',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('player_id', sa.Integer(), nullable=False),
    sa.Column('map_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['map_id'], ['map.id'], ),
    sa.ForeignKeyConstraint(['player_id'], ['player.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('invite',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('player_id', sa.Integer(), nullable=False),
    sa.Column('team_id', sa.Integer(), nullable=False),
    sa.Column('status', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['player_id'], ['player.id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['team.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('map_pick_process',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('finished', sa.Boolean(), nullable=False),
    sa.Column('next_action', sa.Integer(), nullable=False),
    sa.Column('picker_a_id', sa.Integer(), nullable=False),
    sa.Column('picker_b_id', sa.Integer(), nullable=False),
    sa.Column('turn_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['picker_a_id'], ['player.id'], ),
    sa.ForeignKeyConstraint(['picker_b_id'], ['player.id'], ),
    sa.ForeignKeyConstraint(['turn_id'], ['player.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('map_tags',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('map_id', sa.Integer(), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['map_id'], ['map.id'], ),
    sa.ForeignKeyConstraint(['tag_id'], ['map_tag.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('match_team',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=32), nullable=True),
    sa.Column('team_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['team_id'], ['team.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('player_permissions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('player_id', sa.Integer(), nullable=False),
    sa.Column('permission_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['permission_id'], ['player_permission.id'], ),
    sa.ForeignKeyConstraint(['player_id'], ['player.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('whitelisted_player',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('player_id', sa.Integer(), nullable=False),
    sa.Column('map_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['map_id'], ['map.id'], ),
    sa.ForeignKeyConstraint(['player_id'], ['player.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('in_game_team',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=32), nullable=True),
    sa.Column('match_team_id', sa.Integer(), nullable=True),
    sa.Column('starts_as_ct', sa.Boolean(), nullable=False),
    sa.Column('is_ct', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['match_team_id'], ['match_team.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('mappick',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('process_id', sa.Integer(), nullable=False),
    sa.Column('map_id', sa.Integer(), nullable=False),
    sa.Column('selected_by_id', sa.Integer(), nullable=True),
    sa.Column('picked', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['map_id'], ['map.id'], ),
    sa.ForeignKeyConstraint(['process_id'], ['map_pick_process.id'], ),
    sa.ForeignKeyConstraint(['selected_by_id'], ['team.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('match',
    sa.Column('start_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('actual_start_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('actual_end_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('game_meta', sa.JSON(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('team_one_id', sa.Integer(), nullable=True),
    sa.Column('team_two_id', sa.Integer(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('event_id', sa.Integer(), nullable=True),
    sa.Column('map_count', sa.Integer(), nullable=False),
    sa.Column('map_pick_process_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['event.id'], ),
    sa.ForeignKeyConstraint(['map_pick_process_id'], ['map_pick_process.id'], ),
    sa.ForeignKeyConstraint(['team_one_id'], ['match_team.id'], ),
    sa.ForeignKeyConstraint(['team_two_id'], ['match_team.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('matchplayers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('player_id', sa.Integer(), nullable=False),
    sa.Column('match_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['match_id'], ['match_team.id'], ),
    sa.ForeignKeyConstraint(['player_id'], ['player.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('game',
    sa.Column('plugins', sa.JSON(), nullable=True),
    sa.Column('config_overrides', sa.JSON(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('map_id', sa.Integer(), nullable=False),
    sa.Column('status', sa.Integer(), nullable=False),
    sa.Column('match_id', sa.Integer(), nullable=True),
    sa.Column('team_a_id', sa.Integer(), nullable=False),
    sa.Column('team_b_id', sa.Integer(), nullable=False),
    sa.Column('winner_id', sa.Integer(), nullable=True),
    sa.Column('mode', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['map_id'], ['map.id'], ),
    sa.ForeignKeyConstraint(['match_id'], ['match.id'], ),
    sa.ForeignKeyConstraint(['team_a_id'], ['in_game_team.id'], ),
    sa.ForeignKeyConstraint(['team_b_id'], ['in_game_team.id'], ),
    sa.ForeignKeyConstraint(['winner_id'], ['in_game_team.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('player_queue',
    sa.Column('meta', sa.JSON(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('type', sa.Integer(), nullable=False),
    sa.Column('locked', sa.Boolean(), nullable=False),
    sa.Column('locked_at', sa.DateTime(), nullable=True),
    sa.Column('confirmed', sa.Boolean(), nullable=False),
    sa.Column('captain_a_id', sa.Integer(), nullable=True),
    sa.Column('captain_b_id', sa.Integer(), nullable=True),
    sa.Column('match_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['captain_a_id'], ['player.id'], ),
    sa.ForeignKeyConstraint(['captain_b_id'], ['player.id'], ),
    sa.ForeignKeyConstraint(['match_id'], ['match.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('confirmedplayers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('queue_id', sa.Integer(), nullable=False),
    sa.Column('player_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['player_id'], ['player.id'], ),
    sa.ForeignKeyConstraint(['queue_id'], ['player_queue.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('playersession',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('player_id', sa.Integer(), nullable=False),
    sa.Column('game_id', sa.Integer(), nullable=False),
    sa.Column('roster_id', sa.Integer(), nullable=False),
    sa.Column('status', sa.Integer(), nullable=False),
    sa.Column('state', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['game_id'], ['game.id'], ),
    sa.ForeignKeyConstraint(['player_id'], ['player.id'], ),
    sa.ForeignKeyConstraint(['roster_id'], ['in_game_team.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('queueplayers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('queue_id', sa.Integer(), nullable=False),
    sa.Column('player_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['player_id'], ['player.id'], ),
    sa.ForeignKeyConstraint(['queue_id'], ['player_queue.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('round',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('game_id', sa.Integer(), nullable=False),
    sa.Column('number', sa.Integer(), nullable=False),
    sa.Column('winner_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['game_id'], ['game.id'], ),
    sa.ForeignKeyConstraint(['winner_id'], ['in_game_team.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('gameplayerevent',
    sa.Column('meta', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('event', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('game_id', sa.Integer(), nullable=False),
    sa.Column('player_id', sa.Integer(), nullable=False),
    sa.Column('round_id', sa.Integer(), nullable=False),
    sa.Column('is_ct', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['game_id'], ['game.id'], ),
    sa.ForeignKeyConstraint(['player_id'], ['player.id'], ),
    sa.ForeignKeyConstraint(['round_id'], ['round.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('gameplayerevent')
    op.drop_table('round')
    op.drop_table('queueplayers')
    op.drop_table('playersession')
    op.drop_table('confirmedplayers')
    op.drop_table('player_queue')
    op.drop_table('game')
    op.drop_table('matchplayers')
    op.drop_table('match')
    op.drop_table('mappick')
    op.drop_table('in_game_team')
    op.drop_table('whitelisted_player')
    op.drop_table('player_permissions')
    op.drop_table('match_team')
    op.drop_table('map_tags')
    op.drop_table('map_pick_process')
    op.drop_table('invite')
    op.drop_table('blacklisted_player')
    op.drop_table('authsession')
    op.drop_table('team')
    op.drop_table('role')
    op.drop_table('player_permission')
    op.drop_table('player')
    op.drop_table('map_tag')
    op.drop_table('map')
    op.drop_table('event')
    # ### end Alembic commands ###
